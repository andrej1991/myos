#offset 0x500
#codesegment set to 0x50
#stack segment start at 0x1050:000 (ends at 0x10500 + 0xffff)
#ebben a felállásban a GDT szegmenst a 0x20500 címen kéne kezdeni
#az LDT a 0x30500 címen kezdődik
#a  TSS a 0x40500 címen kezdődik

#pusha -> order: EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI. The value of ESP pushed is the value before the instruction is executed.

#bármely %BP -t nem tartalmazó címzési mód (bázis/index/relarív ill. ezek kombinációi) az adatsegmenst (%DS) fogja alapértelmezetten használni
#a %BP -t tartalmazócímzési módok a %SS -t fogják alapértelmezetten használni
#az alapértelmezés a %"szegmensregiszter": (pl %DS:) felülbírálható
.code16
.text	
.globl _start;

_start:
	mov	$0x1050,%ax
	mov	%ax,%ss
	mov	0xffff,%ax
	mov	%ax,%sp
	xor	%ax,%ax
	jmp	main
	
	#.word	0xffff
	

StartOfGDT:
	zerodescriptor:
		.rep	4
		.word 0
		.endr
	OScode:
		.word 0xffff
		.word 0
		.byte 0
		.byte 0b10011010
		.byte 0b11001111
		.byte 0
	OSdata:
		.word 0xffff
		.word 0
		.byte 0
		.byte 0b10010010
		.byte 0b11001111
		.byte 0
	/*OSstack:
		.byte 0
		.byte 1
		.byte 0
		.byte 0
		.byte 0x50
		.byte 0x16
		.byte 0xd0
		.byte 1*/
	GDTend:
	
	GDTdescriptor:			
		.word	23
		.int	StartOfGDT
		#.word	0xffff
	welcome:
		.asciz "hello world!\n\r"
	newline:
		.asciz "\n\r"
	space:
		.asciz " "
	unsupported_bios_routine:
		.asciz "unsupported BIOS routine\n\r"
	hexnum:
		.byte 0
	index:
		.word 0
	buffer:
		.rep 256 
		.byte 0
		.endr
	start_of_screen:
		.word 0xb800
 
.macro mWriteString str              #macro to print a string
     	pusha	
		leaw  \str, %si
		call	writeStringIn
		popa
	.endm
     
	writeStringIn:
		lodsb
		orb  %al, %al
		jz   .writeStringOut
		movb $0x0e, %ah
		int  $0x10
		jmp  writeStringIn
		.writeStringOut:
		ret
		
	.macro writebyte_in_hex hex
		pusha
		movb	\hex,%cl
		movb	%cl,%al
		shrb	$4,%al
		call	printhex
		movb	%cl,%al
		andb	$0x0f,%al
		call	printhex
		#mWriteString space
		popa
	.endm
		
	printhex:
		cmpb	$0xA,%al
		jl		lessthen_0xA
		addb	$0x37,%al
		movb	$0x0e,%ah
		int	$0x10
		ret
		lessthen_0xA:
		addb	$0x30,%al
		movb	$0x0e,%ah
		int	$0x10
		ret
		
	turnoff:
		mov	$0x5307,%ax
		mov	$0x03,%cx
		mov	$0x01,%bx
		int	$0x15
		ret


	read_string:
		pusha
		leaw	buffer,%bx
		movw	$255,index
		readloop:
			xor	%ax,%ax
			int	$0x16
			cmp	$0x0D,%al
			jz		end
			cmp	$0x1B,%al
			jz		end2
			cmp	$0x08,%al
			jz		backspace
			cmp	$0x03,%al
			#jnz	.L2
			#call	turnoff
			#.L2:
			jz		turnoff
			movb	%al,%ds:(%bx)
			add	$1,%bx
			.L1:
			movb	$0x0e,%ah
			int	$0x10
			sub	$1,index
			jz		end2
		jmp	readloop
		backspace:
		mov	index,%cx
		mov	$255,%dx
		or		%cx,%dx
		jz		readloop
		sub	$1,%bx
		movb	$0,%ds:(%bx)
		jmp	.L1
		end2:
		movw	$0,%ax
		jmp	end_of_read
		end:
		movb	$0,%ds:(%bx)
		end_of_read:
		popa
		ret


	printreg_in_hex:
		push	%bp
		mov	%sp,%bp
		pusha	
		movw	%ss:4(%bp),%bx
		writebyte_in_hex %bh
		writebyte_in_hex %bl
		mWriteString space
		popa
		pop	%bp
		ret

			
		
	print_char_without_bios:
		pusha
		mov	start_of_screen,%es
		mov	$0,%bx
		movb	$0x4d,%es:(%bx)
		inc	%bx
		movb	$0x42,%es:(%BX)
		popa
		ret
		
		
				
	switsching_to_protected:
		cli
		/*movw	$31,GDTdescriptor
		movw	%ds,%bx
		shl	$4,%bx
		movw	$StartOfGDT,%ax
		addw	%bx,%ax
		mov	$GDTdescriptor,%bx
		add	$2,%bx
		movl	%ax,%ds:(%bx)*/
		lgdt	(GDTdescriptor)
		mov	%cr0,%eax
		or		$0x1,%ax
		mov	%eax,%cr0
		jmp	$8,$init_real
		ret
	
main:
	#call	clear
	mWriteString welcome
	call	switsching_to_protected
	#mWriteString welcome
	jmp .

.code32
	
.equ video_memory, 0xb8000

	printchar:
		#pusha
		mov	$0xb8000,%ebx
		movb	$0x4d,(%ebx)
		inc	%ebx
		movb	$0x42,(%eBX)
		#popa
		#ret
		jmp	.
		
init_real:
	mov	$0x10,%ax
	mov	%ax,%ds
	mov	$0x10,%ax
	mov	%ax,%ss
	jmp	printchar
	


